<!DOCTYPE html>
<html lang="en">

<head>
    <%- include ("../partials/head.ejs") %>
</head>

<body>
    <%- include ("../partials/navbar.ejs") %>
        <main>
            <h1><strong>Fractal Trees</strong></h1>
            <h2><strong>Drawing with code!</strong></h2>
            <p>
                The picture below is actually not just a picture, it was created with code!
                Very similar to how you learned to draw using block coding in class, the
                tree below was created by code in your web browser. Every time you visit this
                page, computer code is executed to draw the tree. The code for this tree was created by following this
                <a
                    href="https://progur.com/2016/10/procedural-generation-create-fractal-trees-javascript.html">tutorial</a>.
            </p>
            <canvas id="fractalCanvas" height="400" width="600"></canvas>
            <p>
                This tree is a special kind of tree called a <a href="https://en.wikipedia.org/wiki/Fractal">fractal</a>
                tree. A repeated pattern is used to draw it. Instead of a loop, it uses a neat technique called
                <a href="https://en.wikipedia.org/wiki/Recursion">recursion</a>, which shares some similarity to the
                loops you have recently learned about. This idea can be demostrated by
                holding up two mirrors and seeing your reflection repeated over and over.
            </p>
        </main>
        <script>
            // Set active link in the navbar
            document.getElementById("fractal").classList.add("active")
        </script>
        <script>
            /*
                The below code was created following the tutorial found at 
                https://progur.com/2016/10/procedural-generation-create-fractal-trees-javascript.html
            */
            let ctx = document.getElementById("fractalCanvas").getContext("2d");
            ctx.strokeStyle = "purple";
            ctx.fillStyle = "darkgreen";
            ctx.shadowBlur = 15;
            ctx.shadowColor = "rgba(0,0,0,0.8)";
            function draw(startX, startY, len, angle, branchWidth) {
                ctx.lineWidth = branchWidth;
                ctx.beginPath();
                ctx.save();

                ctx.translate(startX, startY);
                ctx.rotate(angle * Math.PI / 180);
                ctx.moveTo(0, 0);
                if (angle > 0) {
                    ctx.bezierCurveTo(10, -len / 2, 10, -len / 2, 0, -len);
                } else {
                    ctx.bezierCurveTo(-10, -len / 2, -10, -len / 2, 0, -len);
                }
                ctx.stroke();

                if (len < 10) {
                    ctx.beginPath();
                    ctx.arc(0, -len, 10, 0, Math.PI / 2);
                    ctx.fill();
                    ctx.restore();
                    return;
                }

                draw(0, -len, len * 0.8, angle + 10, branchWidth * 0.8);
                draw(0, -len, len * 0.8, angle - 10, branchWidth * 0.8);
                ctx.restore();
            }
            draw(300, 390, 80, 0, 10);
        </script>
</body>

</html>